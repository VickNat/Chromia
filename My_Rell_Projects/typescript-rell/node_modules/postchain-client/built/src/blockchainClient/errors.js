export class MissingPubKeyError extends Error {
    constructor() {
        super(`No public key was provided`);
    }
}
export class MissingBlockchainIdentifierError extends Error {
    constructor() {
        super(`No blockchain identifier was provided. Include either a blockchainRid (string) or a blockchainIid (number).`);
    }
}
export class MissingNodeUrlError extends Error {
    constructor() {
        super(`No node url or directory node url was provided. Include either a nodeUrl (string) or a directory node url (number).`);
    }
}
export class BlockchainUrlUndefinedException extends Error {
    constructor(brid) {
        const idType = typeof brid === "string" ? "BRID" : "IID";
        super(`Cannot find nodes hosting the blockchain with ${idType} ${brid}`);
    }
}
export class DirectoryNodeUrlPoolException extends Error {
    constructor() {
        super(`No directory node url was provided`);
    }
}
export class InvalidTransactionFormatException extends Error {
    constructor() {
        super(`The transaction is not in the right format`);
    }
}
export class getTransactionRidException extends Error {
    constructor(error) {
        super(`"Error occurred while getting transaction RID:", ${error}`);
    }
}
//# sourceMappingURL=errors.js.map