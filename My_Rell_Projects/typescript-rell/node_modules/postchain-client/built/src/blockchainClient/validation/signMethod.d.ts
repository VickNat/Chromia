/// <reference types="node" />
import { z } from "zod";
import { Validation } from "./validation.types";
export declare const SignMethodSchema: z.ZodUnion<[z.ZodObject<{
    privKey: z.ZodType<Buffer, z.ZodTypeDef, Buffer>;
    pubKey: z.ZodType<Buffer, z.ZodTypeDef, Buffer>;
}, "strip", z.ZodTypeAny, {
    privKey?: Buffer;
    pubKey?: Buffer;
}, {
    privKey?: Buffer;
    pubKey?: Buffer;
}>, z.ZodObject<{
    pubKey: z.ZodType<Buffer, z.ZodTypeDef, Buffer>;
    sign: z.ZodFunction<z.ZodTuple<[z.ZodType<Buffer, z.ZodTypeDef, Buffer>], z.ZodUnknown>, z.ZodPromise<z.ZodType<Buffer, z.ZodTypeDef, Buffer>>>;
}, "strip", z.ZodTypeAny, {
    pubKey?: Buffer;
    sign?: (args_0: Buffer, ...args_1: unknown[]) => Promise<Buffer>;
}, {
    pubKey?: Buffer;
    sign?: (args_0: Buffer, ...args_1: unknown[]) => Promise<Buffer>;
}>]>;
export type SignMethod = z.infer<typeof SignMethodSchema>;
export declare const isSignMethodValid: Validation;
